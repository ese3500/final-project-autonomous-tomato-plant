#define F_CPU 16000000UL

#include <stdlib.h>
#include <math.h>
#include <stdio.h>
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include "uart.h"
#include "ldr.h"
#include "motor_control.h"

// Stuff for uart print
#define BAUD_RATE 9600
#define BAUD_PRESCALER (((F_CPU / (BAUD_RATE * 16UL))) - 1)
char msg[50];

// ADC values for the LDR
uint16_t adc0; // Bottom left LDR
uint16_t adc1; // Botom right LDR
uint16_t adc2; // Top right LDR
uint16_t adc3; // Top left LDR

uint16_t adc_max; // LDR value with max ADC reading - need for MoveCar()
uint16_t adc_min; // LDR value with min ADC reading - need for MoveCar()

int maxldr; // LDR value with the max ADC reading - need for maxoffour()

volatile uint8_t crashed = 0;
volatile uint8_t buttonStateAtCapture = 0;

// Function for reading all four ADC values continuously 
void adc(void) {
	adc0 = ADC_read(0);
	adc1 = ADC_read(1);
	adc2 = ADC_read(2);
	adc3 = ADC_read(3);
	sprintf(msg, "ADC0: %d \r\n", adc0);
	UART_putstring(msg);
	sprintf(msg, "ADC1: %d \r\n", adc1);
	UART_putstring(msg);
	sprintf(msg, "ADC2: %d \r\n", adc2);
	UART_putstring(msg);
	sprintf(msg, "ADC3: %d \r\n \r\n", adc3);
	UART_putstring(msg);
}

// Function that returns the maximum value between four numbers
int16_t maxoffour(int16_t a, int16_t b, int16_t c, int16_t d) {
	int16_t max = a;  // Start by assuming 'a' is the max
	maxldr = 0;
	if (b > max) {
		max = b;  // Update max if 'b' is greater
		maxldr = 1;
	}
	if (c > max) {
		max = c;  // Update max if 'c' is greater
		maxldr = 2;
	}
	if (d > max) {
		max = d;  // Update max if 'd' is greater
		maxldr = 3;
	}

	return max;  // Return the maximum value
}

// Function that returns the minimum value between four numbers
int16_t minoffour(int16_t a, int16_t b, int16_t c, int16_t d) {
	int16_t min = a;  // Start by assuming 'a' is the max
	if (b < min) {
		min = b;  // Update max if 'b' is greater
	}
	if (c < min) {
		min = c;  // Update max if 'c' is greater
	}
	if (d < min) {
		min = d;  // Update max if 'd' is greater
	}

	return min;  // Return the maximum value
}


void initialize(void) {
	cli(); // Disable global interrupts
	UART_init(BAUD_PRESCALER);
	ADC_init();
	init_motor_pins();
	
	// Set up PE0 edge capture interrupt 
	TIMSK4 |= (1<<ICIE4); // Enable input capture for PE0
	TCCR4B |= (1<<ICIE4); // Set bit to 1 to that it detects high to low edge
	
    DDRC &= ~(1 << DDC5);  // Clear the PC5 bit in DDRC, PC5 as input
	
	TIMSK3 |= (1 << TOIE3);
	
	sprintf(msg, "Initialized!\r\n");
	UART_putstring(msg);
	sei(); // Enable global interrupts
}

// Function for automatically moving the car based on LDR ADC values
void MoveCar() {
	adc_max = maxoffour(adc0, adc1, adc2, adc3);
	adc_min = minoffour(adc0, adc1, adc2, adc3);

	if ((adc_max - adc_min) <= 120) {
		// Falls in the dead zone range: if the ADC readings of the LDRs are all around the same range, don't move the car
		stop();
		sprintf(msg, "stop\r\n");
		UART_putstring(msg);
		_delay_ms(100);
	}
	else if (maxldr == 0) { // Bottom left LDR
		left();
		sprintf(msg, "rl\r\n");
		UART_putstring(msg);
		_delay_ms(1500);
		stop();
		_delay_ms(100);
	}
	else if (maxldr == 1) { // Bottom right LDR
		sprintf(msg, "rr\r\n");
		UART_putstring(msg);
		right();
		_delay_ms(2500);
		stop();
		_delay_ms(100);
	}
	else if (maxldr == 2) { // Top right LDR
		sprintf(msg, "fr\r\n");
		UART_putstring(msg);
		forward();
		_delay_ms(100);

		drift_right();
		_delay_ms(300);
		
		right();
		_delay_ms(150);
		stop();
	}
	else if (maxldr == 3) { // Top left LDR
		sprintf(msg, "fl\r\n");
		UART_putstring(msg);
		forward();
		_delay_ms(150);

		drift_left();
		_delay_ms(100);
		stop();
	}
}

// Function for implementing motor control using the ESP Wifi Blynk buttons
void Wifi_Manual_Motor_Control() {
	if (PINC & (1<<PINC4)) { // If PE0 is high, move the car forward
		while (PINC & (1<<PINC4)) {
			forward();
		}
	} else if (PINE & (1<<PINE1)) { // If PE1 is high, move the car reverse
		while (PINE & (1<<PINE1)) {
			reverse();
		}
	} else if (PINE & (1<<PINE2)) { // If PE2 is high, move the car left
		while (PINE & (1<<PINE2)) {
			left();
		}
	} else if (PINE & (1<<PINE3)) { // If PE3 is high, move the car right
		while (PINE & (1<<PINE3)) {
			right();
		}
	} else if (PINB & (1<<PINB4)) { // If PB4 is high, drift the car left
		while (PINB & (1<<PINB4)) {
			drift_left();
		}
	} else if (PINB & (1<<PINB5)) { // If PB5 is high, drift the car right
		while (PINB & (1<<PINB5)) {
			drift_right();
		}
	} else {
		stop();
	}
}


ISR(TIMER4_CAPT_vect) {
	TCNT3 = 0;
	sprintf(msg, "first detect \r\n");
	UART_putstring(msg);
	buttonStateAtCapture = !buttonStateAtCapture;
	TCCR3B = (1 << CS32);
}

ISR(TIMER3_OVF_vect) {
    if (PINE & (1 << PE0) && buttonStateAtCapture == 1) {
		crashed = 1;
	} 
	else {
	    crashed = 0;  // Reset if the button is no longer pressed
    }
    TCCR3B = 0;
}


int main(void)
{
	UART_init(BAUD_PRESCALER);
	
	initialize();
	while (1) {
		while(crashed) {
			sprintf(msg, "Crashed = 1\n");
			UART_putstring(msg);			
			stop();
		}

		adc();
		MoveCar();
		Wifi_Manual_Motor_Control();
	}
}
